/*
 * Copyright 2011, The gwtquery team.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.query.client.css;

/**
 * Created by IntelliJ IDEA. User: ray Date: May 2, 2009 Time: 12:56:09 AM To
 * change this template use File | Settings | File Templates.
 */
public class CSS {

  public static BackgroundProperty BACKGROUND;

  /**
   * background image is specified, this property specifies whether it is fixed
   * with regard to the viewport ('fixed') or scrolls along with the containing
   * block ('scroll').
   */
  public static BackgroundAttachmentProperty BACKGROUND_ATTACHMENT;

  public static BackgroundColorProperty BACKGROUND_COLOR;

  public static BackgroundImageProperty BACKGROUND_IMAGE;

  public static BackgroundPositionProperty BACKGROUND_POSITION;

  public static BackgroundRepeatProperty BACKGROUND_REPEAT;

  public static BorderProperty BORDER;
  
  public static BorderProperty BORDER_BOTTOM;
  
  public static BorderColorProperty BORDER_BOTTOM_COLOR;
  
  public static BorderStyleProperty BORDER_BOTTOM_STYLE;
  
  public static BorderWidthProperty BORDER_BOTTOM_WIDTH;

  public static BorderCollapseProperty BORDER_COLLAPSE;

  public static BorderColorProperty BORDER_COLOR;

  public static BorderProperty BORDER_LEFT;

  public static BorderColorProperty BORDER_LEFT_COLOR;

  public static BorderStyleProperty BORDER_LEFT_STYLE;

  public static BorderWidthProperty BORDER_LEFT_WIDTH;

  public static BorderProperty BORDER_RIGHT;

  public static BorderColorProperty BORDER_RIGHT_COLOR;

  public static BorderStyleProperty BORDER_RIGHT_STYLE;

  public static BorderWidthProperty BORDER_RIGHT_WIDTH;

  public static BorderSpacingProperty BORDER_SPACING;

  public static BorderStyleProperty BORDER_STYLE;

  public static BorderProperty BORDER_TOP;

  public static BorderColorProperty BORDER_TOP_COLOR;

  public static BorderStyleProperty BORDER_TOP_STYLE;

  public static BorderWidthProperty BORDER_TOP_WIDTH;

  public static BorderWidthProperty BORDER_WIDTH;
  /**
   * For absolutely positioned elements, the bottom property sets the bottom
   * edge of an element to a unit above/below the bottom edge of its containing
   * element.
   * 
   * For relatively positioned elements, the bottom property sets the bottom
   * edge of an element to a unit above/below its normal position.
   * 
   * For static positioned elements, the bottom property has no effect.
   */
  public static EdgePositionProperty BOTTOM;
  public static CaptionSideProperty CAPTION_SIDE;

  /**
   * The clear property specifies which sides of an element where other floating
   * elements are not allowed.
   */
  public static ClearProperty CLEAR;

  /**
   * The clip property lets you specify the dimensions of an absolutely
   * positioned element that should be visible, and the element is clipped into
   * this shape, and displayed.
   * 
   * The clip property does not work if the overflow property is set to visible.
   */
  public static ClipProperty CLIP;

  /**
   * This property describes the foreground color of an element's text content.
   */
  public static ColorProperty COLOR;

  /**
   * This property specifies the type of cursor to be displayed for the pointing
   * device.
   */
  public static CursorProperty CURSOR;

  public static DirectionProperty DIRECTION;

  /**
   * This property specifies the mechanism by which elements are rendered.
   */
  public static DisplayProperty DISPLAY;

  public static EmptyCellsProperty EMPTY_CELLS;

  /**
   * This property specifies whether a box should float to the left, right, or
   * not at all. It may be set for any element, but only applies to elements
   * that generate boxes that are not absolutely positioned.
   */
  public static FloatProperty FLOAT;

  public static FontSizeProperty FONT_SIZE;

  public static FontStyleProperty FONT_STYLE;

  public static FontVariantProperty FONT_VARIANT;

  public static FontWeightProperty FONT_WEIGHT;

  /**
   * This property specifies the content height of boxes generated by
   * block-level, inline-block and replaced elements.
   * 
   * This property does not apply to non-replaced inline-level elements. See the
   * section on computing heights and margins for non-replaced inline elements
   * for the rules used instead.
   */
  public static HeightProperty HEIGHT;

  public static final String INHERIT_VALUE = "inherit";

  /**
   * For absolutely positioned elements, the left property sets the left edge of
   * an element to a unit to the left/right of the left edge of its containing
   * element.
   * 
   * For relatively positioned elements, the left property sets the left edge of
   * an element to a unit to the left/right to its normal position.
   * 
   * For static positioned elements, the left property has no effect.
   */
  public static EdgePositionProperty LEFT;

  public static LetterSpacingProperty LETTER_SPACING;

  public static LineHeightProperty LINE_HEIGHT;

  public static ListStyleProperty LIST_STYLE;

  public static ListStyleImageProperty LIST_STYLE_IMAGE;

  public static ListStylePositionProperty LIST_STYLE_POSITION;

  public static ListStyleTypeProperty LIST_STYLE_TYPE;

  public static MarginProperty MARGIN;

  public static MarginProperty MARGIN_BOTTOM;

  public static MarginProperty MARGIN_LEFT;

  public static MarginProperty MARGIN_RIGHT;

  public static MarginProperty MARGIN_TOP;

  public static HeightProperty MAX_HEIGHT;

  public static WidthProperty MAX_WIDTH;

  public static HeightProperty MIN_HEIGHT;

  public static WidthProperty MIN_WIDTH;

  /**
   * An outline is a line that is drawn around elements (outside the borders) to
   * make the element "stand out".
   * 
   * The outline shorthand property sets all the outline properties in one
   * declaration.
   */
  public static OutlineProperty OUTLINE;

  /**
   * An outline is a line that is drawn around elements (outside the borders) to
   * make the element "stand out". The outline-color property specifies the
   * color of an outline.
   */
  public static OutlineColorProperty OUTLINE_COLOR;

  /**
   * An outline is a line that is drawn around elements (outside the borders) to
   * make the element "stand out". The outline-color property specifies the
   * style of an outline.
   */
  public static OutlineStyleProperty OUTLINE_STYLE;

  /**
   * An outline is a line that is drawn around elements (outside the borders) to
   * make the element "stand out". The outline-width specifies the width of an
   * outline
   */
  public static OutlineWidthProperty OUTLINE_WIDTH;

  /**
   * This property specifies what happens if content overflows an element's
   * box..
   */
  public static OverflowProperty OVERFLOW;

  public static PaddingProperty PADDING;

  public static PaddingProperty PADDING_BOTTOM;

  public static PaddingProperty PADDING_LEFT;

  public static PaddingProperty PADDING_RIGHT;

  public static PaddingProperty PADDING_TOP;

  /**
   * The position property is used to position an element.
   */
  public static PositionProperty POSITION;

  /**
   * For absolutely positioned elements, the right property sets the right edge
   * of an element to a unit to the left/right of the right edge of its
   * containing element.
   * 
   * For relatively positioned elements, the right property sets the right edge
   * of an element to a unit to the left/right to its normal position.
   * 
   * For static positioned elements, the right property has no effect.
   */
  public static EdgePositionProperty RIGHT;

  /**
   * This property describes how inline content of a block is aligned.
   */
  public static TextAlignProperty TEXT_ALIGN;

  public static TextDecorationProperty TEXT_DECORATION;

  public static TextIdentProperty TEXT_IDENT;

  public static TextTransformProperty TEXT_TRANSFORM;

  /**
   * For absolutely positioned elements, the top property sets the top edge of
   * an element to a unit above/below the top edge of its containing element.
   * 
   * For relatively positioned elements, the top property sets the top edge of
   * an element to a unit above/below its normal position.
   * 
   * For static positioned elements, the top property has no effect.
   */
  public static EdgePositionProperty TOP;

  /**
   * This property affects the vertical positioning inside a line box of the
   * boxes generated by an inline-level element.
   */
  public static VerticalAlignProperty VERTICAL_ALIGN;

  /**
   * The 'visibility' property specifies whether the boxes generated by an
   * element are rendered. Invisible boxes still affect layout (set the
   * 'display' property to 'none' to suppress box generation altogether).
   */
  public static VisibilityProperty VISIBILITY;

  public static WhiteSpaceProperty WHITE_SPACE;

  /**
   * This property specifies the content width of boxes generated by block-level
   * and replaced elements.
   * 
   * This property does not apply to non-replaced inline-level elements. The
   * content width of a non-replaced inline element's boxes is that of the
   * rendered content within them (before any relative offset of children).
   * Recall that inline boxes flow into line boxes. The width of line boxes is
   * given by the their containing block, but may be shorted by the presence of
   * floats.
   * 
   * The width of a replaced element's box is intrinsic and may be scaled by the
   * user agent if the value of this property is different than 'auto'.
   */
  public static WidthProperty WIDTH;

  public static WordSpacingProperty WORD_SPACING;

  public static ZIndexProperty ZINDEX;

  static {
    BackgroundProperty.init();
    BorderProperty.init();
    BorderCollapseProperty.init();
    BorderSpacingProperty.init();
    CaptionSideProperty.init();
    ColorProperty.init();
    CursorProperty.init();
    ClearProperty.init();
    ClipProperty.init();
    DisplayProperty.init();
    EdgePositionProperty.init();
    EmptyCellsProperty.init();
    FloatProperty.init();
    FontStyleProperty.init();
    FontVariantProperty.init();
    FontWeightProperty.init();
    FontSizeProperty.init();
    HeightProperty.init();
    LetterSpacingProperty.init();
    LineHeightProperty.init();
    ListStyleProperty.init();
    MarginProperty.init();
    OutlineProperty.init();
    OverflowProperty.init();
    PaddingProperty.init();
    PositionProperty.init();
    TextAlignProperty.init();
    TextDecorationProperty.init();
    TextIdentProperty.init();
    TextTransformProperty.init();
    VerticalAlignProperty.init();
    VisibilityProperty.init();
    WidthProperty.init();
    WhiteSpaceProperty.init();
    WordSpacingProperty.init();
    ZIndexProperty.init();

  }

}
