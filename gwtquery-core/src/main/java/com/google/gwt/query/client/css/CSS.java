package com.google.gwt.query.client.css;

import com.google.gwt.core.client.EntryPoint;

/**
 * Created by IntelliJ IDEA. User: ray Date: May 2, 2009 Time: 12:56:09 AM To
 * change this template use File | Settings | File Templates.
 */
public class CSS implements EntryPoint {

  /**
   * This property affects the vertical positioning inside a line box of the
   * boxes generated by an inline-level element.
   */
  public static VerticalAlign VERTICAL_ALIGN;

  /**
   * Align the line box with the left side of the containing box.
   */
  public static TextAlign.TAlignValue LEFT;

  /**
   * Align the line box with the right side of the containing box.
   */
  public static TextAlign.TAlignValue RIGHT;

  /**
   * This property describes how inline content of a block is aligned.
   */
  public static TextAlign TEXT_ALIGN;

  /**
   * Align the top of the aligned subtree with the top of the line box.
   */
  public static VerticalAlign.VAlignValue TOP;

  /**
   * Align the bottom of the aligned subtree with the bottom of the line box.
   */
  public static VerticalAlign.VAlignValue BOTTOM;

  /**
   * Align the baseline of the box with the baseline of the parent box. If the
   * box doesn't have a baseline, align the bottom margin edge with the parent's
   * baseline.
   */
  public static VerticalAlign.VAlignValue BASELINE;

  /**
   * Lower the baseline of the box to the proper position for subscripts of the
   * parent's box. (This value has no effect on the font size of the element's
   * text.)
   */
  public static VerticalAlign.VAlignValue SUB;

  /**
   * Raise the baseline of the box to the proper position for superscripts of
   * the parent's box. (This value has no effect on the font size of the
   * element's text.)
   */
  public static VerticalAlign.VAlignValue SUPER;

  /**
   * Align the top of the box with the top of the parent's content area.
   */
  public static VerticalAlign.VAlignValue TEXT_TOP;

  /**
   * Align the vertical midpoint of the box with the baseline of the parent box
   * plus half the x-height of the parent.
   */
  public static VerticalAlign.VAlignValue MIDDLE;

  /**
   * Align the bottom of the box with the bottom of the parent's content area.
   */
  public static VerticalAlign.VAlignValue TEXT_BOTTOM;

  /**
   * Inherit value from parent elements.
   */
  public static Inherit INHERIT;

  /**
   * Align the line box with the left side of the containing box.
   */
  public static TextAlign.TAlignValue CENTER;

  /**
   * this property specifies that the inline boxes are to be made flush with
   * both sides of the block. If the computed value of text-align is 'justify'
   * while the computed value of white-space is 'pre' or 'pre-line', the actual
   * value of text-align is set to the initial value.
   */
  public static TextAlign.TAlignValue JUSTIFY;

  /**
   * background image is specified, this property specifies whether it is fixed
   * with regard to the viewport ('fixed') or scrolls along with the containing
   * block ('scroll').
   */
  public static BackgroundAttachment BACKGROUND_ATTACHMENT;

  /**
   * Background image is fixed.
   */
  public static BackgroundAttachment.AttachValue FIXED;

  /**
   * Background image scrolls when viewport is scrolled.
   */
  public static BackgroundAttachment.AttachValue SCROLL;

  public static BackgroundColor BACKGROUND_COLOR;

  public static RGBColor AQUA;

  public static RGBColor BLACK;

  public static RGBColor FUSCHIA;

  public static RGBColor GRAY;

  public static RGBColor GREEN;

  public static RGBColor LIME;

  public static RGBColor MAROON;

  public static RGBColor NAVY;

  public static RGBColor OLIVE;

  public static RGBColor ORANGE;

  public static RGBColor PURPLE;

  public static RGBColor RED;

  public static RGBColor SILVER;

  public static RGBColor TEAL;

  public static RGBColor WHITE;

  public static RGBColor YELLOW;

  public static RGBColor TRANSPARENT;

  /**
   * This property describes the foreground color of an element's text content.
   */
  public static Color COLOR;

  /**
   * This property specifies whether a box should float to the left, right, or
   * not at all. It may be set for any element, but only applies to elements
   * that generate boxes that are not absolutely positioned.
   */
  public static Float FLOAT;

  /**
   * The element generates a block box that is floated to the left. Content
   * flows on the right side of the box, starting at the top (subject to the
   * 'clear' property).
   */
  public static Float.FloatValue FLOAT_LEFT;

  /**
   * Similar to 'left', except the box is floated to the right, and content
   * flows on the left side of the box, starting at the top.
   */
  public static Float.FloatValue FLOAT_RIGHT;

  /**
   * The box is not floated.
   */
  public static Float.FloatValue FLOAT_NONE;

  /**
   * This property specifies the type of cursor to be displayed for the pointing
   * device.
   */
  public static Cursor CURSOR;

  /**
   * The UA determines the cursor to display based on the current context.
   */
  public static Cursor.CursorValue CURSOR_AUTO;

  /**
   * A simple crosshair (e.g., short line segments resembling a "+" sign).
   */
  public static Cursor.CursorValue CURSOR_CROSSHAIR;

  /**
   * The platform-dependent default cursor. Often rendered as an arrow.
   */
  public static Cursor.CursorValue CURSOR_DEFAULT;

  /**
   * The cursor is a pointer that indicates a link.
   */
  public static Cursor.CursorValue CURSOR_POINTER;

  /**
   * Indicates something is to be moved.
   */
  public static Cursor.CursorValue CURSOR_MOVE;

  /**
   * Indicates text that may be selected. Often rendered as an I-beam.
   */
  public static Cursor.CursorValue CURSOR_TEXT;

  /**
   * Indicates that the program is busy and the user should wait. Often rendered
   * as a watch or hourglass.
   */
  public static Cursor.CursorValue CURSOR_WAIT;

  /**
   * A progress indicator. The program is performing some processing, but is
   * different from 'wait' in that the user may still interact with the program.
   * Often rendered as a spinning beach ball, or an arrow with a watch or
   * hourglass.
   */
  public static Cursor.CursorValue CURSOR_PROGRESS;

  /**
   * Help is available for the object under the cursor. Often rendered as a
   * question mark or a balloon.
   */
  public static Cursor.CursorValue CURSOR_HELP;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_E_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_NE_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_NW_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_N_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_SE_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_SW_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_S_RESIZE;

  /**
   * Indicate that some edge is to be moved. For example, the 'se-resize' cursor
   * is used when the movement starts from the south-east corner of the box.
   */
  public static Cursor.CursorValue CURSOR_W_RESIZE;

  /**
   * This property specifies the mechanism by which elements are rendered.
   */
  public static Display DISPLAY;

  /**
   * This value causes an element to generate a block box.
   */
  public static Display.DisplayValue BLOCK;

  /**
   * This value causes an element to generate one or more inline boxes.
   */
  public static Display.DisplayValue INLINE;

  /**
   * This value causes an element to generate a block box, which itself is
   * flowed as a single inline box, similar to a replaced element. The inside of
   * an inline-block is formatted as a block box, and the element itself is
   * formatted as an inline replaced element.
   */
  public static Display.DisplayValue INLINE_BLOCK;

  /**
   * This value causes an element (e.g., LI in HTML) to generate a principal
   * block box and a list-item inline box. For information about lists and
   * examples of list formatting, please consult the section on lists.
   */
  public static Display.DisplayValue LIST_ITEM;

  /**
   * This value causes an element to not appear in the formatting structure
   * (i.e., in visual media the element generates no boxes and has no effect on
   * layout). Descendant elements do not generate any boxes either; the element
   * and its content are removed from the formatting structure entirely. This
   * behavior cannot be overridden by setting the 'display' property on the
   * descendants. Please note that a display of 'none' does not create an
   * invisible box; it creates no box at all. CSS includes mechanisms that
   * enable an element to generate boxes in the formatting structure that affect
   * formatting but are not visible themselves. Please consult the section on
   * visibility for details.
   */
  public static Display.DisplayValue NONE;

  /**
   * This value creates either block or inline boxes, depending on context.
   * Properties apply to run-in boxes based on their final status (inline-level
   * or block-level).
   */
  public static Display.DisplayValue RUN_IN;

  /**
   * Specifies that an element defines a block-level table: it is a rectangular
   * block that participates in a block formatting context.
   */
  public static Display.DisplayValue TABLE;

  /**
   * Specifies that an element defines an inline-level table: it is a
   * rectangular block that participates in an inline formatting context).
   */
  public static Display.DisplayValue INLINE_TABLE;

  /**
   * Specifies that an element groups one or more rows.
   */
  public static Display.DisplayValue TABLE_ROW_GROUP;

  /**
   * Specifies that an element groups one or more columns.
   */
  public static Display.DisplayValue TABLE_COLUMN_GROUP;

  /**
   * Specifies that an element describes a column of cells.
   */
  public static Display.DisplayValue TABLE_COLUMN;

  /**
   * Like 'table-row-group', but for visual formatting, the row group is always
   * displayed before all other rows and row groups and after any top captions.
   * Print user agents may repeat header rows on each page spanned by a table.
   * If a table contains multiple elements with 'display: table-header-group',
   * only the first is rendered as a header; the others are treated as if they
   * had 'display: table-row-group'.
   */
  public static Display.DisplayValue TABLE_HEADER_GROUP;

  /**
   * Like 'table-row-group', but for visual formatting, the row group is always
   * displayed after all other rows and row groups and before any bottom
   * captions. Print user agents may repeat footer rows on each page spanned by
   * a table. If a table contains multiple elements with 'display:
   * table-footer-group', only the first is rendered as a footer; the others are
   * treated as if they had 'display: table-row-group'.
   */
  public static Display.DisplayValue TABLE_FOOTER_GROUP;

  /**
   * Specifies that an element is a row of cells.
   */
  public static Display.DisplayValue TABLE_ROW;

  /**
   * Specifies that an element represents a table cell.
   */
  public static Display.DisplayValue TABLE_CELL;

  /**
   * Specifies a caption for the table. All elements with 'display:
   * table-caption' must be rendered, as described in section 17.4.
   */
  public static Display.DisplayValue TABLE_CAPTION;

  /**
   * The 'visibility' property specifies whether the boxes generated by an
   * element are rendered. Invisible boxes still affect layout (set the
   * 'display' property to 'none' to suppress box generation altogether).
   */
  public static Visibility VISIBILITY;

  /**
   * The generated box is visible.
   */
  public static Visibility.VisibilityValue VISIBLE;

  /**
   * The generated box is invisible (fully transparent, nothing is drawn), but
   * still affects layout. Furthermore, descendents of the element will be
   * visible if they have 'visibility: visible'.
   */
  public static Visibility.VisibilityValue HIDDEN;

  /**
   * Please consult the CSS spec on dynamic row and column effects in tables. If
   * used on elements other than rows, row groups, columns, or column groups,
   * 'collapse' has the same meaning as 'hidden'.
   */
  public static Visibility.VisibilityValue COLLAPSE;

  /**
   * This property specifies the content width of boxes generated by block-level
   * and replaced elements.
   *
   * This property does not apply to non-replaced inline-level elements. The
   * content width of a non-replaced inline element's boxes is that of the
   * rendered content within them (before any relative offset of children).
   * Recall that inline boxes flow into line boxes. The width of line boxes is
   * given by the their containing block, but may be shorted by the presence of
   * floats.
   *
   * The width of a replaced element's box is intrinsic and may be scaled by the
   * user agent if the value of this property is different than 'auto'.
   */
  public static Width WIDTH;

  /**
   * This property specifies the content height of boxes generated by
   * block-level, inline-block and replaced elements.
   *
   * This property does not apply to non-replaced inline-level elements. See the
   * section on computing heights and margins for non-replaced inline elements
   * for the rules used instead.
   */
  public static Height HEIGHT;

  public static void init() {
    INHERIT = Inherit.create();
    BackgroundAttachment.init();
    BackgroundColor.init();
    Color.init();
    Cursor.init();
    Display.init();
    Float.init();
    Height.init();
    RGBColor.init();
    TextAlign.init();
    VerticalAlign.init();
    Visibility.init();
    Width.init();
  }

  public void onModuleLoad() {
    CSS.init();
  }
}
